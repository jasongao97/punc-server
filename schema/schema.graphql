type Query {
  isLogin: Boolean!
  me: Employee
  departments: [Department!]
  overtimes: [Overtime!]
}

type Department {
  id: ID!
  name: String!
  employees: [Employee!]
  director: Employee
  leaves: [Leave!]
}

type Employee {
  id: ID!
  name: String!
  birthday: String
  department: Department!
  arrangements: [Arrangement!]
  tempArrangements: [TempArrangement!]
  
  attendances(startDate: String, endDate: String): [Attendance!]
}

type Arrangement {
  startTime: String!
  endTime: String!
}

type TempArrangement {
  startTime: String!
  endTime: String!
  startDate: String!
  endDate: String!
}

type Attendance {
  date: String!
  arriveAt: String!
  leaveAt: String!
  status: Int!
  reason: String!
}

type Leave {
  type: Int!
  status: Int!
  startDate: String!
  endDate: String!
  reason: String!
}

type Overtime {
  date: String!
  startTime: String!
  endTime: String!
}

type Mutation {
  login(name: String!, pwd: String!): String
}
